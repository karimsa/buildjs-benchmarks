{"version":3,"sources":["bench.js"],"names":[],"mappings":"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","file":"bench.dist.js","sourcesContent":["const { exec: _exec } = require('child_process')\nconst { exists, readFile } = require('mz/fs')\nconst { mkdirSync: mkdir, createWriteStream, readFileSync } = require('fs')\nconst { sync: rf } = require('rimraf')\nconst asar = require('asar')\nconst Benchmkark = require('benchmark')\n\n/**\n * Cleanup & create sandbox.\n */\nrf(`${__dirname}/build`)\nmkdir(`${__dirname}/build`)\n\n/**\n * Easily configurable to add tools.\n */\nconst tools = process.env.TOOLS.split(' ')\n\n/**\n * Wraps up an async function into the\n * deferred-style used by benchmarkjs.\n */\nfunction defer(fn) {\n  return prom => {\n    fn().then(\n      prom.resolve.bind(prom),\n      err => {\n        err = err || new Error('Something went wrong.')\n        console.error(err.stack || err)\n        process.exit(-1)\n      }\n    )\n  }\n}\n\n/**\n * async child_process.exec - different from the mz/\n * implementation. this one gives me stderr separate\n * from stdout.\n */\nfunction exec(test, tool, logs) {\n  return new Promise((resolve, reject) => {\n    const child = _exec(`npm start`, {\n      cwd: `${__dirname}/${test}/${tool}`\n    })\n    const { stderr, stdout } = child\n\n    stderr.pipe(process.stderr)\n    stdout.on('data', data => logs[tool].write(data))\n    \n    child.on('err', reject)\n\n    child.on('exit', code => {\n      if (code !== 0) reject()\n      else resolve()\n    })\n  })\n}\n\n/**\n * Runs single test.\n */\nfunction run( test ) {\n  return new Promise(async (resolve, reject) => {\n    mkdir(`${__dirname}/build/${test}`)\n\n    const suite = new Benchmkark.Suite()\n    const logs = {}\n\n    console.log('%s:\\n', test)\n\n    /**\n     * Add test runner for each tool & use streams\n     * for log management to decrease overhead.\n     */\n    for (let tool of tools) {\n      let blacklist = []\n\n      if (await exists(`${__dirname}/${test}/blacklist`)) {\n        blacklist = (await readFile(`${__dirname}/${test}/blacklist`, 'utf8')).split(/\\r?\\n/g)\n      }\n\n      if (blacklist.indexOf(tool) === -1) {\n        logs[tool] = createWriteStream(`${__dirname}/build/${test}/build-${tool}.log`)\n\n        suite.add(tool, defer(async () => exec(test, tool, logs)), {\n          defer: true\n        })\n      } else {\n        console.log('%s is not capable of this test', tool)\n      }\n    }\n\n    /**\n     * Run the benchmarks.\n     */\n    suite\n      .on('cycle', evt => console.log(String(evt.target)))\n      .on('complete', function () {\n        console.log('')\n        console.log('Fastest is ' + this.filter('fastest').map('name'))\n\n        /**\n         * Close all logs, since we're about to zip & end.\n         */\n        for (let tool in logs) {\n          if (logs.hasOwnProperty(tool)) {\n            logs[tool].end()\n          }\n        }\n\n        /**\n         * Next test.\n         */\n        resolve()\n      })\n      .run({ 'async': true })\n  })\n}\n\n/**\n * Run test.\n */\nrun(process.env.TEST).then(() => {\n  /**\n   * Create log package for release.\n   */\n  asar.createPackage(`${__dirname}/build`, 'build.asar', () => {\n    // do nothing - node should exit\n  })\n}).catch(err => {\n  console.error(err.stack || err)\n  process.exit(-1)\n})"]}